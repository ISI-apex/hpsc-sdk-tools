# Build the diverse set of components that make up the HPSC SDK

BLD=bld

# We do bld/fetch/component instead of bld/component/fetch (latter
# more consistent with the rest of the targets), because we want
# a single fetch cache directory, for easy moving around.
FETCH=$(BLD)/fetch
FETCH_CACHE?=$(FETCH)

# Main installation destination for all installable components
SDK_SYSROOT=sysroot
SDK_PREFIX=$(BLD)/$(SDK_SYSROOT)/usr

# Shared across multiple SDK components, hence defined here
SDK_TOOLS=hpsc-sdk-tools

# Host tools needed to boostrap the build of the SDK (not including deps of
# nested builds)
WGET=wget
TAR=tar

# Each group adds prereqs
all:
fetch: $(FETCH)
fetch/clean:
	rm -rf $(FETCH)
clean:
	rm -rf $(BLD)/$(SDK_SYSROOT)
.PHONY: all fetch fetch/clean clean

# Common rules

# fetch-rule(component,subdir)
define fetch-rule
$(FETCH_CACHE)/$(2)/$(TARBALL_$(1)): | $(FETCH_CACHE)/$(2)/.
	$(WGET) --no-verbose -O $$@ $(URL_$(1))/$$(@F)
.SECONDARY: $(FETCH_CACHE)/$(2)/$(TARBALL_$(1)) $(FETCH)/$(2)/$(TARBALL_$(1))
$(FETCH)/$(2): $(FETCH)/$(2)/$(TARBALL_$(1))
.PHONY: $(FETCH)/$(2)
$(FETCH): $(FETCH)/$(2)
endef
.PHONY: $(FETCH)

# extract-rule(component,dest_subdir,fetch_subdir)
define extract-rule
$(BLD)/$(2)/$(DIR_$(1)): $(FETCH)/$(3)/$(TARBALL_$(1)) | $(BLD)/$(2)/.
	$(TAR) -C $$(@D) -x -f $$<
	touch $$@
$(BLD)/$(2)/$(DIR_$(1))/clean:
	rm -rf $$(@D) $(ART_$(1))
$(BLD)/$(2): $(BLD)/$(2)/$(DIR_$(1))
$(BLD)/$(2)/clean: $(BLD)/$(2)/$(DIR_$(1))/clean
.PHONY: $(BLD)/$(2)/$(1) $(2)/$(DIR_$(1))/clean

endef

# Rules for extracting cleaning, and wiring up to aggregate targets by group.
#
# In the extract recipe, touch the directory, since the timestamp of the dir in
# tar may be stored and it will be older than the tarball, which would cause
# the target to be remade.
#
# build-rule(component,group)
define build-rule
$(ART_$(1)): $(DEV_ENV_FILE) | $(BLD)/$(2)/$(DIR_$(1))
$(ART_$(1)): DIR=$(BLD)/$(2)/$(DIR_$(1))
$(BLD)/$(2)/$(1): $(ART_$(1))
$(BLD)/$(2): $(ART_$(1))
endef

define version-lt
$(filter-out $(2),$(firstword $(sort $(1) $(2))))
endef # version-lt

## Several alternatives for installing dependencies

DEP_ENV_FILE:=dep-env.sh

# We can't make this choice for the user -- that is, env artifact has to be
# makeable only by a phony target. Also, help if deps/* wasn't run.
deps $(BLD)/$(DEP_ENV_FILE):
	@echo "ERROR: must build dependency target first:" && \
	echo "  supported options (pick one): deps/sysroot deps/centos7 deps/arch" && \
	echo "  to reset and choose again: deps/clean"
	exit 1
deps/clean:
	rm -f $(BLD)/$(DEP_ENV_FILE)
.PHONY: deps deps/clean

deps/centos7: | $(BLD)/.
	sudo yum install -y https://centos7.iuscommunity.org/ius-release.rpm
	sudo yum update
	sudo yum group install "Development Tools"
	sudo yum install java git gtk3 chrpath texinfo screen rsync glib2-devel \
        libfdt-devel pixman-devel zlib-devel uboot-tools bc ncurses-devel \
        python-configparser python36u python36u-libs python36u-devel \
        python36u-pip pax python-sphinx patchelf readline-devel \
		guile guile-devel
	sudo ln -sf /usr/bin/python3.6 /usr/bin/python3
	sudo yum install cairo-devel cairo-gobject-devel gobject-introspection-devel \
		pygobject2 pygboject2-devel
	echo > $(BLD)/$(DEP_ENV_FILE)
.PHONY: deps/centos7

deps/arch: | $(BLD)/.
	sudo pacman -S --needed base-devel git screen rsync python python2 \
		uboot-tools glib2 pixman zlib ncurses wget dtc bc gmp guile2.0 \
		chrpath cpio diffstat rpcsvc-proto patchelf readline
	which pacaur # if not installed, please install pacaur manually
	pacaur -S --needed pax
	echo > $(BLD)/$(DEP_ENV_FILE)
.PHONY: deps/arch

# Option: dependencies built from source

# The depend sysroot builder just happens to be version controlled int he
# sdk-tools repository), but it's standalone.
S_dep-sysroot=$(SDK_TOOLS)/sysroot
$(S_dep-sysroot):
	$(MAKE) -C $(S_dep-sysroot)
$(S_dep-sysroot)/%: PHONY
	$(MAKE) -C $(S_dep-sysroot) $*
$(S_dep-sysroot)/clean:
	$(MAKE) -C $(S_dep-sysroot) clean
.PHONY: $(S_dep-sysroot) $(S_dep-sysroot)/clean

deps/sysroot: $(S_dep-sysroot) | $(BLD)/.
	echo 'source $(abspath $(S_dep-sysroot)/bld/env.sh)' > $(BLD)/$(DEP_ENV_FILE)
.PHONY: deps/sysroot deps/sysroot/clean

## Components of the SDK that are shipped in the SDK and built from source
# S_* are paths to source trees, B_* are build directories

S_sdk-tools=$(SDK_TOOLS)
$(S_sdk-tools): $(S_sdk-tools)/all
$(S_sdk-tools)/all: $(BLD)/$(DEP_ENV_FILE)
$(S_sdk-tools)/%: PHONY
	$(MAKE) -C $(S_sdk-tools) FETCH_CACHE=$(abspath $(FETCH_CACHE)) $*
.PHONY: $(S_sdk-tools)
all: $(S_sdk-tools)
clean: $(S_sdk-tools)/clean

S_qemu=qemu
B_qemu=$(BLD)/qemu
# Build Qemu s.t. its GDB stub points to the given target CPU cluster:
# TRCH=0, RTPS_R52=1, RTPS_A53=2, HPPS=3
QEMU_GDB_TARGET_CLUSTER=3
QEMU_ARGS=
QEMU_TARGET=aarch64-softmmu
$(B_qemu)/config.status: $(BLD)/$(DEP_ENV_FILE) | $(B_qemu)/.
	cd $(@D) && CFLAGS+=-DGDB_TARGET_CLUSTER=$(QEMU_GDB_TARGET_CLUSTER) \
		../../$(S_qemu)/configure \
		--prefix=$(abspath $(SDK_PREFIX)) \
		--python=$$(which python2) \
		--target-list=$(QEMU_TARGET) --enable-fdt \
		--disable-kvm --disable-xen --enable-debug
# TODO: add install-doc target (requires Sphynx 1.3, not in CentOS 7)
$(B_qemu)/$(QEMU_TARGET)/qemu-system-aarch64: $(B_qemu)/config.status
	$(MAKE) -C $(B_qemu) $(QEMU_ARGS)
$(B_qemu): $(B_qemu)/$(QEMU_TARGET)/qemu-system-aarch64
	$(MAKE) -C $(B_qemu) $(QEMU_ARGS) install
# Install helper for tap networking: must be run as root for setuid, hence not
# done by default in the qemu target
DEFAULT_BRIDGE=br0
# This target needs to be run with root privileges
$(B_qemu)/sysinstall:
	install -o root -g root -m 4775 $(B_qemu)/$@ $(abspath $(SDK_PREFIX))/
	echo 'allow $(DEFAULT_BRIDGE)' >> $(abspath $(SDK_PREFIX))/etc/qemu/bridge.conf
$(B_qemu)/clean:
	$(MAKE) -C $(B_qemu) $(QEMU_ARGS) clean
$(B_qemu)/clean/all:
	rm -rf $(B_qemu)
	[ ! -d "$(SDK_PREFIX)" ] || \
		find $(SDK_PREFIX) -name '*qemu*' -prune -exec rm -rf {} \;
.PHONY: $(B_qemu) $(B_qemu)/clean $(B_qemu)/sysinstall
all: $(B_qemu)
clean: $(B_qemu)/clean/all
# Alias for convenience, to invoke either way
$(S_qemu): $(B_qemu) ;
$(S_qemu)/%: $(B_qemu)/% ;

S_qemu-dt=qemu-devicetrees
QDT_ARGS=
$(S_qemu-dt)/LATEST/SINGLE_ARCH/hpsc-arch.dtb: $(S_qemu-dt)
$(S_qemu-dt): $(BLD)/$(DEP_ENV_FILE)
	$(MAKE) -C $(S_qemu-dt) $(QDT_ARGS)
$(S_qemu-dt)/clean:
	$(MAKE) -C $(S_qemu-dt) $(QDT_ARGS) clean
.PHONY: $(S_qemu-dt) $(S_qemu-dt)/clean
all: $(S_qemu-dt)
clean: $(S_qemu-dt)/clean

S_zebu=zebu
$(S_zebu): $(BLD)/$(DEP_ENV_FILE)
	$(ZEBU_SHELL) -c 'source $(ZEBU_ENV) && make -C $(S_zebu)'
$(S_zebu)/clean:
	$(ZEBU_SHELL) -c 'source $(ZEBU_ENV) && make -C $(S_zebu) clean'; \
.PHONY: $(S_zebu) $(S_zebu)/clean
# Zebu is only present on some machines, so user invokes its target explicitly
# all: $(S_zebu)
# clean: $(S_zebu)/clean

## SDK components fetched and installed from an external source

# Binary toolchains

TC=$(SDK_SYSROOT)/opt/bintc
TC_FETCH=bintc
DEPS_TC=\
	arm_gnu_rm \
	arm_gnu_a \

# Other toolchain distributables may work as well, with the known exceptions:
# * GCC v8 breaks build of kernel 4.14 (build completes but kernel does not run)
# * gcc-arm-none-eabi v8 (from ARM, not Linaro) breaks build of M4,R52 bare metal
# * gcc-arm-none-eabi older than v7 2018-q2-update breaks build of R52 bare metal

VER_arm_gnu_rm=7-2018-q2-update
# Page: https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads
URL_arm_gnu_rm=https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2
TARBALL_arm_gnu_rm=gcc-arm-none-eabi-$(VER_arm_gnu_rm)-linux.tar.bz2
DIR_arm_gnu_rm=gcc-arm-none-eabi-$(VER_arm_gnu_rm)

VER_arm_gnu_a=7.4.1-2019.02
URL_arm_gnu_a=https://releases.linaro.org/components/toolchain/binaries/latest-7/aarch64-linux-gnu
TARBALL_arm_gnu_a=gcc-linaro-$(VER_arm_gnu_a)-x86_64_aarch64-linux-gnu.tar.xz
DIR_arm_gnu_a=gcc-linaro-$(VER_arm_gnu_a)-x86_64_aarch64-linux-gnu

TC_TARGETS=$(foreach tc,$(DEPS_TC),$(BLD)/$(TC)/$(DIR_$(tc)))
TC_RELOCATE_TARGETS=$(foreach t,$(TC_TARGETS),$(t)/relocate)
.PHONY: $(TC_RELOCATE_TARGETS)

$(BLD)/$(TC)/relocate: $(TC_RELOCATE_TARGETS)
.PHONY: $(BLD)/$(TC) $(BLD)/$(TC)/clean $(BLD)/$(TC)/relocate

all: $(BLD)/$(TC)
clean: $(BLD)/$(TC)/clean

$(foreach d,$(DEPS_TC),$(eval $(call fetch-rule,$(d),$(TC_FETCH)))\
					   $(eval $(call extract-rule,$(d),$(TC),$(TC_FETCH))))
FETCH_SUBDIRS += $(TC_FETCH)

$(TC_RELOCATE_TARGETS): $(BLD)/$(TC)/%/relocate : $(BLD)/$(TC)/% $(ART_glibc)
	find $(@D) -type f -executable -not -name '*.so*' -exec \
		patchelf --set-interpreter $(abspath $(TC_SYSROOT_PREFIX)/lib/ld-$(VER_glibc).so) \
		--set-rpath $(abspath $(TC_SYSROOT_PREFIX)/lib) {} \;

all: $(if $(TC_RELOCATE),$(TC_RELOCATE_TARGETS))

# Components of optional sysroot for binary toolchains

# Option: auxiliary sysroot for binary toolchains, needed only on systems that
# are older than the libraries that the toolchains were linked against.  (Not
# to be confused with the SDK installation sysroot SDK_SYSROOT nor with
# dependency sysroot). Keep it separate from the main sysroot, because it's
# optional, overrides low-level libc and loader -- a giant hack prone to chaos.
TC_SYSROOT:=bintc-sysroot
TC_SYSROOT_PREFIX=$(BLD)/$(TC_SYSROOT)/usr

# Pre-built toolchains are linked against a libc, so we must have at least that
# version, so we build it in the TC sysroot if system doesn't provide it.
TC_LIBC_MIN_VERSION=2.14
LIBC_VERSION=$(shell ldd --version | head -1 | grep -o '[0-9]\+\(\.[0-9]\+\)\+')
TC_RELOCATE=$(if $(call version-lt,$(LIBC_VERSION),$(TC_LIBC_MIN_VERSION)),1)

DEPS_TC_SYSROOT=\
	glibc \
	zlib \

# glibc >= 2.14 is required by pre-built toolchains
# ...but glibc >=2.21 needs GCC >= 4.6; glibc >= 2.20 needs GCC >= 4.4)
VER_glibc=2.20
URL_glibc=https://ftp.gnu.org/gnu/libc
TARBALL_glibc=glibc-$(VER_glibc).tar.xz
DIR_glibc=glibc-$(VER_glibc)
ART_glibc=$(TC_SYSROOT_PREFIX)/lib/libc.so

VER_zlib=1.2.11
URL_zlib=https://www.zlib.net
TARBALL_zlib=zlib-$(VER_zlib).tar.xz
DIR_zlib=zlib-$(VER_zlib)
ART_zlib=$(TC_SYSROOT_PREFIX)/lib/libz.so

all: $(if $(TC_RELOCATE),$(BLD)/$(TC_SYSROOT))
clean: $(BLD)/$(TC_SYSROOT)/clean

$(BLD)/$(TC_SYSROOT)/clean:
	rm -rf $(@D)

$(foreach d,$(DEPS_TC_SYSROOT),\
	$(eval $(call fetch-rule,$(d),$(TC_SYSROOT)))\
	$(eval $(call extract-rule,$(d),$(TC_SYSROOT),$(TC_SYSROOT)))\
	$(eval $(call build-rule,$(d),$(TC_SYSROOT))))
FETCH_SUBDIRS += $(TC_SYSROOT)

$(ART_glibc):
	mkdir -p $(DIR)/build
	cd $(DIR)/build && ../configure --prefix=$(abspath $(TC_SYSROOT_PREFIX))
	$(MAKE) -C $(DIR)/build
	$(MAKE) -C $(DIR)/build install

$(ART_zlib):
	cd $(DIR) && ./configure --prefix=$(abspath $(TC_SYSROOT_PREFIX))
	$(MAKE) -C $(DIR)
	$(MAKE) -C $(DIR) install

# Components fetched from external source and built from source

EXTERN:=extern
DEPS_EXTERN=\
	gdb \

# HPSC SDK (Qemu) requires GDB with multi-arch support for debugging
VER_gdb=8.3.1
URL_gdb=https://ftp.gnu.org/gnu/gdb
TARBALL_gdb=gdb-$(VER_gdb).tar.xz
DIR_gdb=gdb-$(VER_gdb)
ART_gdb=$(SDK_PREFIX)/bin/gdb

all: $(BLD)/$(EXTERN)
clean: $(BLD)/$(EXTERN)/clean

$(foreach d,$(DEPS_EXTERN),\
	$(eval $(call fetch-rule,$(d),$(EXTERN)))\
	$(eval $(call extract-rule,$(d),$(EXTERN),$(EXTERN)))\
	$(eval $(call build-rule,$(d),$(EXTERN))))
FETCH_SUBDIRS += $(EXTERN)

$(ART_gdb):
	cd $(DIR) && ./configure --prefix=$(abspath $(SDK_PREFIX)) \
		--enable-targets=arm-none-eabi,aarch64-none-linux-,x86_64-none-linux- \
		--enable-languages=c \
		--enable-multilib --enable-interwork --disable-nls \
		--with-python=$$(which python3) --with-guile=no --with-system-readline
	$(MAKE) -C $(DIR)
	$(MAKE) -C $(DIR) install

# We make a copy, so that we're self-sufficient in case FETCH_CACHE goes away
ifneq ($(patsubst %.,%,$(FETCH)),$(FETCH_CACHE)) # strip . from /. (see mkdir rule)
# This mkdir rule is so that $(FETCH)/% doesn't match $(FETCH)/. and create
# a circular dependency. This is only needed with the /. workaround (see mkdir rule)
FETCH_DIR_TARGETS=$(FETCH)/. $(foreach fd,$(FETCH_SUBDIRS),$(FETCH)/$(fd)/.)
$(FETCH_DIR_TARGETS):
	mkdir -p $@
$(FETCH)/%: $(FETCH_CACHE)/% | $(FETCH_DIR_TARGETS)
	cp $< $@
endif
.SECONDARY: $(FETCH_DIR_TARGETS)

# SDK environment

# Some components are built in-tree some out-of-tree, some installed into
# sysroot, some used directly from their source directory.
TC_PATHS=$(foreach t,$(DEPS_TC),$(BLD)/$(TC)/$(DIR_$(t))/bin)
SPACE=$(subst ,, )
PATHS=$(subst $(SPACE),:,$(abspath \
	$(SDK_PREFIX)/bin \
	$(TC_PATHS) \
	$(S_sdk-tools)/bin \
	$(S_zebu)/bin \
))

# Available only on the Zebu server
ZEBU=zebu
ZEBU_SHELL=csh
ZEBU_ENV=$(abspath $(S_zebu)/zebu_setup.sh)

define ENV
export PATH="$(PATHS):$$PATH"
export QEMU_DT="$(abspath $(S_qemu-dt))"
export QEMU_DT_SRC="hpsc-arch.dts"
export QEMU_DT_FILE="$$QEMU_DT/LATEST/SINGLE_ARCH/hpsc-arch.dtb"
export HPSC_SDK_CONF="$(abspath $(S_sdk-tools)/conf)"
export ZEBU="$(abspath $(S_zebu))"
export ZEBU_ENV="$(abspath $(ZEBU_ENV))"
export ZEBU_SHELL="$(ZEBU_SHELL)"
endef

$(BLD)/env.sh: export ENV_SH=$(ENV)
$(BLD)/env.sh: $(BLD)/$(DEP_ENV_FILE) | $(BLD)/.
	@echo "# Autogenerated environment file for using the SDK" > $@
	cat $^ >> $@
	echo "$$ENV_SH" >> $@
env: $(BLD)/env.sh
env/clean:
	rm -f $(BLD)/env.sh
.PHONY: env env/clean

all: env
clean: env/clean



# Ideally, this would be "%/:" but make <=3.81 eats trailing slashes
%/. :
	mkdir -p $@

# For declaring pattern rules phony (basically an indirection)
PHONY:
.PHONY: PHONY

# Disable built-in rules
.SUFFIXES:
