#!/usr/bin/env python3

import sys
import re
import tempfile
import argparse

from qmp import QMP

def int_autobase(val):
    if val.startswith("0x"):
        return int(val, 16)
    if re.match(r'0[0-9]+', val):
        return int(val, 8)
    return int(val, 10)

parser = argparse.ArgumentParser(
    description="Dump target memory from Qemu via QMP")
parser.add_argument('host',
    help='Qemu QMP Telnet server hostname')
parser.add_argument('port', type=int,
    help='Qemu QMP Telnet server port')
parser.add_argument('cpu', type=int_autobase,
    help='CPU index from which to access memory')
parser.add_argument('address', type=int_autobase,
    help='Address where to begin dumping')
parser.add_argument('length', type=int_autobase, nargs='?',
    help='Length of data to dump (in bytes)')
parser.add_argument('--length-at', type=int_autobase,
    help='Get the size to dump by reading a number as string from this address')
parser.add_argument('--output', '-o',
    help='File where to save the dump (stdout if none)')
parser.add_argument('--verbose', '-v', action='store_true',
    help='Print requests and replies')
args = parser.parse_args()

def do_dump(cpu, addr, length, file):
    return qmp.command("pmemsave",
        **{
            "val": addr,
            "size": length,
            "cpu-index": cpu,
            "filename": file,
        })

def dump_int(cpu, addr):
    max_int_length = 32 # string repr of a 64-bit integer (with margin)
    tmpout = tempfile.NamedTemporaryFile(mode="r")
    do_dump(cpu, addr, max_int_length, tmpout.name)
    int_str = tmpout.read()
    tmpout.close()
    print("SIZE=", int_str)
    return int_autobase(int_str)

if args.length is not None and args.length_at is not None:
    print("ERROR: conflicting argument: cannot have both length and --length-at",
          file=sys.stderr)
    sys.exit(1)

qmp = QMP(args.host, args.port, verbose=args.verbose)

if args.length is not None:
    length = args.length
elif args.length_at is not None:
    length = dump_int(args.cpu, args.length_at)
else:
    print("ERROR: missing argument: need either length or --length-at",
          file=sys.stderr)
    sys.exit(1)

if args.output is not None:
    out_fname = args.output
    fout = open(out_fname, "wb")
else:
    tmpout = tempfile.NamedTemporaryFile(mode="rb")
    out_fname = tmpout.name
    fout = sys.stdout

do_dump(args.cpu, args.address, length, out_fname)

if args.output is None:
    tmpout.flush()
    while True:
        d = tmpout.read(4096)
        if len(d) == 0:
            break
        sys.stdout.write(d)
    tmpout.close()
