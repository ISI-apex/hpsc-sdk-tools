#!/usr/bin/env python3

import sys
import argparse
import re
import os
from collections import OrderedDict

parser = argparse.ArgumentParser(
    description="Merge key-value environments, output to stdout")
parser.add_argument('input', nargs='*',
    help='Input files with environments to merge (blank output if none)')
parser.add_argument('--output', '-o',
    help='Output filename where to save the merged env file (stdout if none)')
args = parser.parse_args()

d = OrderedDict()
for f in args.input:
    # ignore non-existant inputs, useful for overriding by merging
    if not os.path.exists(f):
        continue

    fin = open(f, "r")
    line_num = 0
    for line in fin:
        line_num += 1
        line = re.sub(r'\s*#.*', '', line.strip())
        if len(line) == 0:
            continue
        m = re.match(r"^\s*([^\s=]*?)\s*([+-])?=(.*)$", line)
        if not m:
            raise Exception(
                "line: %u: syntax error: not a key=value pair" % line_num)
        k = m.group(1)
        op = m.group(2)
        v = m.group(3)
        print(k, op, v)
        if op == '+':
            d[k] += " " + v
        elif op == '-':
            kept = filter(lambda x: x.strip() != v.strip(), d[k].split())
            d[k] = " ".join(kept)
        else:
            d[k] = v
    fin.close()

if args.output:
    outfp = open(args.output, "w")
else:
    outfp = sys.stdout

try:
    for k in d:
        outfp.write(k + '=' + d[k] + "\n")
except: # when used from makefiles, important to not create output on failure
    if args.output and os.path.exists(args.output):
        os.remove(args.output)
    raise
