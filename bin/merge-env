#!/usr/bin/env python3

import sys
import argparse
import re
import os
from collections import OrderedDict

parser = argparse.ArgumentParser(
    description="Merge key-value environments, output to stdout")
parser.add_argument('input', nargs='*',
    help='Input files with environments to merge (blank output if none)')
parser.add_argument('--output', '-o',
    help='Output filename where to save the merged env file (stdout if none)')
args = parser.parse_args()

d = OrderedDict()
for f in args.input:
    # ignore non-existant inputs, useful for overriding by merging
    if not os.path.exists(f):
        continue

    fin = open(f, "r")
    line_num = 0
    for line in fin:
        line_num += 1
        line = re.sub(r'\s*#.*', '', line.strip())
        if len(line) == 0:
            continue
        if '=' not in line:
            raise Exception(
                "line: %u: syntax error: not a key=value pair" % line_num)
        lhs, v = line.split('=', maxsplit=1)
        if re.match(r".*\+$", lhs):
            k = lhs[:-1]
            append = True
        else:
            k = lhs
            append = False
        if re.search(r"\s", k):
            raise Exception("syntax error: line %u: invalid identifier: %s" \
                % (line_num, k))
        if append:
            d[k] += " " + v
        else:
            d[k] = v
    fin.close()

if args.output:
    outfp = open(args.output, "w")
else:
    outfp = sys.stdout

try:
    for k in d:
        outfp.write(k + '=' + d[k] + "\n")
except: # when used from makefiles, important to not create output on failure
    if args.output and os.path.exists(args.output):
        os.remove(args.output)
    raise
