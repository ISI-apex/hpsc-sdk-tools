#!/usr/bin/env python3

import os
import argparse

from memmap import MemMap
from inicfg import IniCfg, int_autobase

parser = argparse.ArgumentParser(
    description="Compose a binary memory image from files defined in a memory map")
parser.add_argument('map_file',
    help='Input file with memory map')
parser.add_argument('--config', '-c', required=True,
    help='Input file with size and layout parameters in INI format')
parser.add_argument('--memory', '-m', required=True,
    help='Name of memory for which to create image (a section in config file)')
parser.add_argument('--output', '-o', required=True,
    help='Output filename where to save the binary image')
args = parser.parse_args()

class MkMemImgException(Exception):
    def __init__(self, message, line=0):
        self.line = line
        self.message = message

def fill_image_with_ones(fout, fmt, size):
    if fmt == "bin":
        buf = b'\xFF' * 4096
        while size > 0:
            if size > len(buf):
                fout.write(buf)
                size -= len(buf)
            else:
                fout.write(b'\xFF' * size)
                size -= size
    elif fmt == "vhex":
        raise MkMemImgException("NOT IMPLEMENTED: sparse vhex format")
    else:
        raise MkMemImgException("unrecognized image format: %s" % fmt)

def fill_image(fout, fmt, size, fmap_it):
    remaining_space = size
    for line, k, addr, blob in fmap_it:
        if addr == MemMap.DEST_ELF:
            raise MkMemImgException(
                "NOT IMPLEMENTED: composing image from ELF")
        addr = int_autobase(addr)

        fin = open(blob.fname, "rb")
        fin.seek(blob.slice_offset)
        if fmt == "bin":
            fout.seek(addr)
            while blob.slice_length is None or blob.slice_length > 0:
                max_chunk_len = 4096
                if blob.slice_length is not None:
                    chunk_len = min(blob.slice_length, max_chunk_len)
                    blob.slice_length -= chunk_len
                else:
                    chunk_len = max_chunk_len
                d = fin.read(chunk_len)
                if len(d) == 0:
                    break
                if remaining_space < len(d):
                    raise MkMemImgException("content overflowed image")
                fout.write(d)
                remaining_space -= len(d)
        elif fmt == "vhex":
            print("@%x" % addr, file=fout)
            # TODO: re-use hpsc-objcopy's classes
            raise MkMemImgException("NOT IMPLEMENTED: sparse vhex format", line)
        fin.close()

def size_str(size):
    return "%u bytes = %.4f MB" % (size, float(size) / (1<<20))

try:
    fmap = open(args.map_file, "r")
    cfg = IniCfg(args.config)

    mem_type, fmt = cfg.get_props(args.memory, 'type', 'image_format')

    fout = open(args.output, "wb")
    fmap_it = MemMap.iter_mem(fmap, args.memory)
    try:
        if mem_type == "ram":
            size = cfg.get_prop_as_size(args.memory, 'size')
            print("Creating %s image of size:" % mem_type, size_str(size))
            if fmt == "bin":
                fout = open(args.output, "wb")
                fout.truncate(size)
                fill_image(fout, fmt, size, fmap_it)
                fout.close()
            elif fmt == "vhex":
                fout = open(args.output, "w")
                raise MkMemImgException(
                    "vhex format not implemented (mem %s)" % args.memory)
                fout.close()
        elif mem_type == "nand":
            if fmt == "vhex":
                raise MkMemImgException(
                    "vhex format not implemented (mem %s)" % args.memory)
            blocks, ppb, page, oob = cfg.get_props(args.memory,
                'blocks', 'ppb', 'page', 'oob')
            size = int(blocks) * int(ppb) * (int(page) + int(oob))
            print("Creating %s image of size:" % mem_type, size_str(size))
            fout = open(args.output, "wb")
            fill_image_with_ones(fout, fmt, size)
            fill_image(fout, fmt, size, fmap_it)
            fout.close()
        else:
            raise MkMemImgException(
                "invalid type of memory for '%s': %s" % (args.memory, mem_type))

    except MkMemImgException as e:
        raise MkMemImgException("%s:%u: %s" % (args.map_file, e.line, e.message)) from e
    except Exception as e:
        raise MkMemImgException("%s: exception" % (args.map_file)) from e

    fmap.close()

except: # when used from makefiles, important to not create output on failure
    os.remove(args.output)
    raise
