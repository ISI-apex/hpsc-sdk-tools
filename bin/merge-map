#!/usr/bin/env python3

import sys
import os
import re
import argparse
from collections import OrderedDict

parser = argparse.ArgumentParser(
    description="Merge memory maps, output to stdout")
parser.add_argument('input', nargs='*',
    help='Input files with memory maps to merge (blank output if none)')
parser.add_argument('--output', '-o',
    help='Output filename where to save the merged map file (stdout if none)')
args = parser.parse_args()

def write_fields(f, *fields):
    TAB_WIDTH = 8 # spaces
    MIN_FIELD_WIDTH = 4 # tabs
    for e in fields:
        field_width = max(len(e) // TAB_WIDTH + 1, MIN_FIELD_WIDTH)
        tabs = field_width - len(e) // TAB_WIDTH
        tabs = tabs if tabs >= 0 else 0
        padding = "\t" * tabs
        f.write(e + padding)
    f.write("\n")

d = OrderedDict()
for f in args.input:
    fin = open(f, "r")
    line_num = 0
    for line in fin:
        line_num += 1
        line = re.sub(r'\s*#.*', '', line.strip())
        if len(line) == 0:
            continue
        tok = line.split()
        if len(tok) < 4:
            raise Exception("syntax error on line: %u" % line_num)
        m = tok[0] # memory ID
        k = tok[1]
        addr = tok[2]
        fname = tok[3]
        if addr == '*' or fname == '*':
            if k not in d:
                raise Exception(("%s:%u: key '%s' has wildcard field " + \
                                "but is not in parent") % (f, line_num, k))
            if addr == '*':
                addr = d[k]["addr"]
            if fname == '*':
                fname = d[k]["fname"]
        if m not in d:
            d[m] = OrderedDict()
        d[m][k] = {"addr": addr, "fname": fname}
    fin.close()

if args.output:
    outfp = open(args.output, "w")
else:
    outfp = sys.stdout

try:
    for m in d:
        for k in d[m]:
            write_fields(outfp, m, k, d[m][k]["addr"], d[m][k]["fname"])
except: # when used from makefiles, important to not create output on failure
    if args.output:
        os.remove(args.output)
    raise
