#!/usr/bin/env python3

import sys
import os
import re
import argparse
from collections import OrderedDict

from memmap import MemMap

parser = argparse.ArgumentParser(
    description="Merge memory maps, output to stdout")
parser.add_argument('input', nargs='*',
    help='Input files with memory maps to merge (blank output if none)')
parser.add_argument('--output', '-o',
    help='Output filename where to save the merged map file (stdout if none)')
args = parser.parse_args()

def write_fields(f, *fields):
    TAB_WIDTH = 8 # spaces
    MIN_FIELD_WIDTH = 4 # tabs
    for e in fields:
        try:
            field_val = "0x%x" % e
        except:
            field_val = str(e) if e is not None else '-'
        field_width = max(len(field_val) // TAB_WIDTH + 1, MIN_FIELD_WIDTH)
        tabs = field_width - len(field_val) // TAB_WIDTH
        tabs = tabs if tabs >= 0 else 0
        padding = "\t" * tabs
        f.write(field_val + padding)
    f.write("\n")

d = OrderedDict()
origin = {}
for f in args.input:
    fin = open(f, "r")
    for line, m, k, addr, blob in MemMap.iter(open(f, "r")):
        if addr == '*' or blob.fname == '*' or \
            blob.slice_offset == '*' or blob.slice_length == '*':
            if k not in d[m]:
                raise Exception(("%s:%u: " + \
                    "mem '%s' key '%s' has wildcard but is not in parent") % \
                    (f, line, m, k))
            if addr == '*':
                addr = d[m][k]["addr"]
            if blob.fname == '*':
                blob.fname = d[m][k]["fname"]
            if blob.slice_offset == '*':
                blob.slice_offset = d[m][k]["slice_offset"]
            if blob.slice_length == '*':
                blob.slice_length = d[m][k]["slice_length"]
        if m not in d:
            d[m] = OrderedDict()
            origin[m] = {}
        origin[m][k] = f
        d[m][k] = {"addr": addr, "fname": blob.fname,
                   "slice_offset": blob.slice_offset,
                   "slice_length": blob.slice_length }
    fin.close()

if args.output:
    outfp = open(args.output, "w")
else:
    outfp = sys.stdout

try:
    for m in d:
        for k in d[m]:
            print('# SOURCE:', origin[m][k], file=outfp)
            write_fields(outfp, m, k, d[m][k]["addr"], d[m][k]["fname"],
                         d[m][k]["slice_offset"], d[m][k]["slice_length"])
except: # when used from makefiles, important to not create output on failure
    if args.output and os.path.exists(args.output):
        os.remove(args.output)
    raise
