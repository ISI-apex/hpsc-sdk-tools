#!/usr/bin/env python3

import os
import argparse
from collections import OrderedDict

from memmap import MemMap
from inicfg import IniCfg

parser = argparse.ArgumentParser(
    description="Compose a Zebu configuration file for reloading content into " + \
                "memory (along with makefile rules for building the image files) " + \
                "from a cross-platform memory map and a memory config file")
parser.add_argument('map_file',
    help='Input file with generic cross-platform memory map config')
parser.add_argument('--config', '-c', required=True,
    help='Input file with memory configuration parameters in INI format')
parser.add_argument('--output', '-o', required=True,
    help='Output filename where to save the Zebu memory loading config')
parser.add_argument('--root', '-r', default='',
    help='Top level directory to append to relative paths')
parser.add_argument('--suffix', default='',
    help='Suffix to append when forming filename for composite image from memory id')
parser.add_argument('--extension-bin', default='raw',
    help='Extension to append to binary images (Zebu quirk)')

# For rule generation for makefiles that would assemble the image files
parser.add_argument('--rules',
    help='Output filename to where to optionally generate makefile rules')
parser.add_argument('--image-dir',  default='',
    help='Relative path to directory where images are to be created')
parser.add_argument('--artifacts',
    help='Name of makefile variable where to save list of artifacts')
args = parser.parse_args()

class ParseException(Exception):
    pass

def abspath(p):
    if not os.path.isabs(p):
        return os.path.join(args.root, p)
    return p

def bld_path(fname):
    return os.path.join(args.image_dir, fname)

# This naming convention must be observed by whoever is assembling the actual
# image files (e.g. makefile).
def image_fmt(cfg, m):
    fmt, = cfg.get_props(m, 'image_format')
    return fmt
def composite_image_name(cfg, m):
    fmt = image_fmt(cfg, m)
    return m + args.suffix + '.' + fmt
def slice_image_name(cfg, parent_mem, slice_mem):
    fmt = image_fmt(cfg, parent_mem)
    return slice_mem + '.slice' + args.suffix + '.' + fmt

def zebu_load_path(image_path, fmt):
    load_path = abspath(image_path)
    if args.extension_bin and fmt == "bin":
        load_path += '.' + args.extension_bin
    return load_path

def is_sliced(cfg, m):
    return bool(cfg.get_prop(m, 'sliced', False))

def get_slice_parent(cfg, m):
    return cfg.get_prop(m, 'slice_of', None)

def get_slices(cfg, m):
    """Return slices of a parent memory"""
    slices = []
    for s in cfg.sections():
        if s == m:
            continue
        parent = get_slice_parent(cfg, m)
        if parent is not None and parent == m:
            slices.append(s)
    return slices

def check_initialize(cfg, m):
    """Lookup 'initialize' flag on either the slice or parent"""
    initialize_prop = 'initialize'
    initialize = bool(cfg.get_prop(m, initialize_prop, False))
    if initialize:
        return True
    # else check parent
    parent_mem = get_slice_parent(cfg, m)
    if parent_mem is not None:
        return bool(cfg.get_prop(parent_mem, initialize_prop, False))
    return False

fout = open(args.output, "w")

try:
    cfg = IniCfg(args.config)

    fmap = open(args.map_file, "r")

    # Used for rule generation, and for guarding against duplicates
    composite_images = {} # indexed by memory id
    artifact_relations = {} # indexed by (relative) image file path

    zebu_map = OrderedDict()

    for line, m, k, addr, fname in MemMap.iter(fmap):
        try:
            if bool(cfg.get_prop(m, 'skip', False)):
                continue

            if addr == MemMap.DEST_ELF: # load file according to elf header
                raise ParseException("loading ELF by sections is not implemented")

            else:
                bld_image = bld_path(composite_image_name(cfg, m))
                fmt = image_fmt(cfg, m)
                if m not in composite_images:
                    is_component = False
                    composite_images[m] = True
                    artifact_relations[bld_image] = []
                else:
                    is_component = True
                artifact_relations[bld_image].append(fname)

            if is_component:
                continue

            # One memory chip model composed of separate mem arrays
            if is_sliced(cfg, m):
                slices = get_slices(cfg, m)
                for sl in slices:
                    slice_bld_image = bld_path(slice_image_name(cfg, m, sl))

                    artifact_relations[bld_image] = []
                    artifact_relations[slice_bld_image] = [bld_image]

                    zebu_id, = cfg.get_props(sl, 'zebu_id')
                    zebu_map[zebu_id] = zebu_load_path(slice_bld_image, fmt)
                continue

            # Striped memories, we load the same image into all
            # Could also build striped images, but there's no point.
            if bool(cfg.get_prop(m, 'striped', False)):
                banks, = cfg.get_props(m, 'banks')
                banks = int(banks)
                zebu_ids = []
                for b in range(banks):
                    mem_id = '%s.%u' % (m, b)
                    zebu_id, = cfg.get_props(mem_id, 'zebu_id')
                    zebu_ids.append(zebu_id)
            else:
                zebu_id, = cfg.get_props(m, 'zebu_id')
                zebu_ids = [zebu_id]

            for zebu_id in zebu_ids:
                zebu_map[zebu_id] = zebu_load_path(bld_image, fmt)

        except Exception as e:
            raise ParseException("%s:%u: exception" % (args.map_file, line)) from e

    # Memories marked initialize need to be preloaded even if the memory
    # map does not specify any content for them.
    for m in cfg.sections():
        if bool(cfg.get_prop(m, 'skip', False)):
            continue

        if m not in composite_images:
            sliced = bool(cfg.get_prop(m, 'sliced', False))
            if sliced:
                continue # will do stuff for the children
            if check_initialize(cfg, m):
                # instruct for creation of a composite image with no components
                composite_images[m] = True
                parent = get_slice_parent(cfg, m)
                if parent is not None:
                    fmt = image_fmt(cfg, parent)
                    bld_image = bld_path(composite_image_name(cfg, parent))
                    slice_bld_image = bld_path(slice_image_name(cfg, parent, m))
                    artifact_relations[slice_bld_image] = [bld_image]
                    load_image = slice_bld_image
                else:
                    fmt = image_fmt(cfg, m)
                    bld_image = bld_path(composite_image_name(cfg, m))
                    artifact_relations[bld_image] = [] # no blobs => empty image
                    load_image = bld_image
                zebu_id, = cfg.get_props(m, 'zebu_id')
                zebu_map[zebu_id] = zebu_load_path(load_image, fmt)

    for zebu_id, load_file in zebu_map.items():
        print(zebu_id, load_file, file=fout)

    fmap.close()
    fout.close()

except: # when used from makefiles, important to not create output on failure
    os.remove(args.output)
    raise

if args.rules:
    if args.artifacts is None:
        raise Exception("missing argument: --artifacts (required with --rules)")
    frules = open(args.rules, "w")
    try:
        MemMap.Rules.write_artifacts(frules, args.artifacts,
            artifact_relations.keys())
        MemMap.Rules.write_relations(frules, artifact_relations)
        frules.close()
    except: # when used from makefiles, important to not create output on failure
        os.remove(args.rules)
        raise
