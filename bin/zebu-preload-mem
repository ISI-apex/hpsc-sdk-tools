#!/usr/bin/env python3

import os
import argparse
from collections import OrderedDict

from memmap import MemMap
from inicfg import IniCfg

parser = argparse.ArgumentParser(
    description="Compose a Zebu configuration file for reloading content into " + \
                "memory (along with makefile rules for building the image files) " + \
                "from a cross-platform memory map and a memory config file")
parser.add_argument('map_file',
    help='Input file with generic cross-platform memory map config')
parser.add_argument('--config', '-c', required=True,
    help='Input file with memory configuration parameters in INI format')
parser.add_argument('--output', '-o', required=True,
    help='Output filename where to save the Zebu memory loading config')
parser.add_argument('--root', '-r', default='',
    help='Top level directory to append to relative paths')
parser.add_argument('--suffix', default='',
    help='Suffix to append when forming filename for composite image from memory id')

# For rule generation for makefiles that would assemble the image files
parser.add_argument('--rules',
    help='Output filename to where to optionally generate makefile rules')
parser.add_argument('--image-dir',  default='',
    help='Relative path to directory where images are to be created')
parser.add_argument('--artifacts',
    help='Name of makefile variable where to save list of artifacts')
args = parser.parse_args()

class ParseException(Exception):
    pass

def abspath(p):
    if not os.path.isabs(p):
        return os.path.join(args.root, p)
    return p

def bld_path(fname):
    return os.path.join(args.image_dir, fname)

# This naming convention must be observed by whoever is assembling the actual
# image files (e.g. makefile).
def composite_image_name(cfg, m):
    fmt, = cfg.get_props(m, 'image_format')
    return m + args.suffix + '.' + fmt

fout = open(args.output, "w")

try:
    cfg = IniCfg(args.config)

    fmap = open(args.map_file, "r")

    # Used for rule generation, and for guarding against duplicates
    whole_images = {}
    composite_images = {} # indexed by memory id
    composite_artifacts = {} # indexed by (relative) image file path

    zebu_map = OrderedDict()

    for line, m, k, addr, fname in MemMap.iter(fmap):
        try:
            if cfg.get_prop(m, 'skip', False):
                continue

            if addr == MemMap.DEST_ELF: # load file according to elf header
                raise ParseException("loading ELF by sections is not implemented")

            elif addr == MemMap.DEST_WHOLE: # whole image
                if m in whole_images or m in composite_images:
                    raise ParseException("an image was already specified for mem %s" % m)
                whole_images[m] = fname
                load_file = abspath(fname)

            else:  # composite image, gather up its components
                # assume someone will create an image, named according to convention
                bld_image = bld_path(composite_image_name(cfg, m))
                if m not in composite_images:
                    composite_images[m] = True
                    composite_artifacts[bld_image] = []
                    load_file = abspath(bld_image)
                else:
                    load_file = None
                composite_artifacts[bld_image].append(fname)

            if load_file is not None:
                # Striped memories, we load the same image into all
                # Could also build striped images, but there's no point.
                if bool(cfg.get_prop(m, 'striped', False)):
                    banks, = cfg.get_props(m, 'banks')
                    banks = int(banks)
                    zebu_ids = []
                    for b in range(banks):
                        mem_id = '%s.%u' % (m, b)
                        zebu_id, = cfg.get_props(mem_id, 'zebu_id')
                        zebu_ids.append(zebu_id)
                else:
                    zebu_id, = cfg.get_props(m, 'zebu_id')
                    zebu_ids = [zebu_id]

                for zebu_id in zebu_ids:
                    zebu_map[zebu_id] = load_file

        except Exception as e:
            raise ParseException("%s:%u: exception" % (args.map_file, line)) from e

    for zebu_id, load_file in zebu_map.items():
        print(zebu_id, load_file, file=fout)

    fmap.close()
    fout.close()

except: # when used from makefiles, important to not create output on failure
    os.remove(args.output)
    raise

if args.rules:
    if args.artifacts is None:
        raise Exception("missing argument: --artifacts (required with --rules)")
    frules = open(args.rules, "w")
    try:
        MemMap.Rules.write_artifacts(frules, args.artifacts,
            whole_images.values(), composite_artifacts.keys())
        MemMap.Rules.write_relations(frules, composite_artifacts)
        frules.close()
    except: # when used from makefiles, important to not create output on failure
        os.remove(args.rules)
        raise
