#!/usr/bin/env python3

import sys
import argparse
import configparser
import json
import re
from functools import reduce

parser = argparse.ArgumentParser(
    description="Compile config from INI human-readable format to binary")
parser.add_argument('-s', '--schema', required=True,
    help='File with the compilation schema for the config')
parser.add_argument('ini_file',
    help='Input file in INI format')
parser.add_argument('bin_file',
    help='Output file saved as a binary blob')
args = parser.parse_args()

def int_autobase(val):
    if val.startswith("0x"):
        return int(val, 16)
    if re.match(r'0[0-9]+', val):
        return int(val, 8)
    return int(val, 10)

class CfgcError(Exception):
    pass

class SchemaError(CfgcError):
    pass
class FieldValueError(CfgcError):
    pass

def num_bits(x):
    n = 0
    while x:
        if x & 0x1 == 0x1:
            n += 1
        x >>= 1
    return n

def check_bitmask_map(vmap):
    for k1 in vmap:
        if num_bits(vmap[k1]) != 1:
            raise SchemaError("bitmask value with mutliple bits: %s (0x%x)" % \
                    (k1, vmap[k1]))
        for k2 in vmap:
            if k1 != k2 and vmap[k1] == vmap[k2]:
                raise SchemaError("bitmask values overlap: %s, %s" % (k1, k2))

def spec_to_type(spec):
    t = spec["type"]
    s = spec["spec"]
    if t == "bitfield" or t == "bitmask":
        if len(s) >= 4:
            vmap = s[3]
            if t == "bitmask":
                check_bitmask_map(vmap)
        else:
            vmap = None
        return Bitfield(word=s[0], bit=s[1], width=s[2], vmap=vmap)
    elif t == "u32":
        return Bitfield(word=s[0], bit=0, width=32, vmap=None)
    else:
        raise SchemaError("invalid type: %s" % t)

class Bitfield:
    def __init__(self, word, bit, width, vmap=None):
        self.word = word
        self.bit = bit
        self.width = width
        self.vmask = (1 << self.width) - 1
        self.vmap = vmap

    def map(self, v):
        try:
            if self.vmap is None:
                return int_autobase(v)
            return self.vmap[v]
        except KeyError:
            raise FieldValueError("value '%s' not one of: {%s}" % \
                                  (v, ",".join(self.vmap.keys())))
    def build(self, val):
        v = reduce(lambda x, y: x | self.map(y), val.split(), 0x0)
        if v & self.vmask != v:
            raise FieldValueError("value 0x%x wider than field width %u" % (v, self.width))
        return (v & self.vmask) << self.bit

class ConfigError(CfgcError):
    pass
class ConfigKeyError(ConfigError):
    pass
class ConfigValueError(ConfigError):
    pass

def strip_comments(s):
    return re.sub(r'//.*', '', s)

BYTES_IN_WORD = 4
def bytearray_from_wordarray(wa):
    ba = []
    for w in wa:
        for i in range(0, BYTES_IN_WORD):
            ba += [(w & (0xff << (8 * i))) >> (8 * i)]
    return bytearray(ba)

def compile(cfg, schema):
    cfg_bin = [] # list of words
    for s in cfg.sections():
        if s not in schema:
            raise ConfigKeyError("section '%s' not in schema" % s)
        sect_sch = schema[s]
        for k in cfg[s]:
            if k not in sect_sch:
                raise ConfigKeyError("field '%s' not in schema for section '%s'" % \
                                     (k, s))
            try:
                v = cfg[s][k]
                f = spec_to_type(sect_sch[k])
                if f.word >= len(cfg_bin):
                    cfg_bin.extend([0x0] * (f.word + 1 - len(cfg_bin)))
                cfg_bin[f.word] |= f.build(v)
            except SchemaError as exc:
                raise SchemaError("field %s.%s spec invalid: %s" % \
                        (s, k, *exc.args))
            except FieldValueError as exc:
                raise ConfigValueError("field %s.%s value '%s' invalid: %s" % \
                                       (s, k, v, *exc.args)) from exc
    return bytearray_from_wordarray(cfg_bin)

try:
    schema = json.loads(strip_comments(open(args.schema, "r").read()))
except Exception as exc:
    print("Error in ", args.schema, ":", *exc.args)
    sys.exit(1)

try:
    cfg = configparser.ConfigParser()
    cfg.read(args.ini_file)
except Exception as exc:
    print("Error in ", args.ini_file, ":", *exc.args)
    sys.exit(1)

try:
    binary = compile(cfg, schema)
except ConfigError as exc:
    print("Error in ", args.ini_file, ": does not comply to schema:", *exc.args)
    sys.exit(1)
except CfgcError as exc:
    print("Error in ", args.ini_file, ":", *exc.args)
    sys.exit(1)

fout = open(args.bin_file, "wb")
fout.write(binary)
